/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author s.isaic
 */
import java.awt.Color;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class UserRequest extends javax.swing.JFrame {

    /**
     * Creates new form UserRequest
     */
    private String username;
    private char[] password;
    private static final String ADMIN_USERNAME = "admin";
    private static String ADMIN_PASSWORD_HASH = PasswordUtil.hashPassword("qwerty");
    private boolean isAdmin = false;

    public UserRequest() {

        // Impostazioni iniziali della finestra
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        // Impedisce il ridimensionamento della finestra
        this.setResizable(false);
        this.setTitle("Accesso Admin");
        
        // Imposta il tipo della finestra
        this.setType(Type.UTILITY);
        
        // Inizializza la variabile password con una lunghezza di 20 caratteri
        this.password = new char[20];
        initComponents();
        setLocationRelativeTo(null);
        
        // Imposta il focus sulla label 4
        jLabel4.requestFocusInWindow();
        // Carica la password dal file
        caricaPassword();
        // Imposta la posizione del cursore nei campi di input
        jTextField1.setCaretPosition(0);
        jPasswordField1.setCaretPosition(0);
    }

    // Metodo per caricare la password dal file di configurazione
    private void caricaPassword() {

        try (BufferedReader br = new BufferedReader(new FileReader("src/password.txt"))) {
            String hashedPassword = br.readLine();
            if (hashedPassword != null) {
                ADMIN_PASSWORD_HASH = hashedPassword; 
            }
        } catch (IOException e) {
            System.out.println("Errore nella lettura del file: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
       // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Accesso Admin");

        jLabel1.setText("ACCEDI");

        jTextField1.setText("username");
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Accedi");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Accedi come user");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPasswordField1.setText("password");
        jPasswordField1.setToolTipText("");
        jPasswordField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPasswordField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPasswordField1FocusLost(evt);
            }
        });
        jPasswordField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Username");

        jLabel3.setText("Password");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addComponent(jPasswordField1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(39, 39, 39)))
                .addContainerGap(37, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        
                      

    // Metodo che gestisce il click del pulsante per il login
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // Prende i dati dal form di login
        username = jTextField1.getText();
        password = jPasswordField1.getPassword();
        // Esegui l'hash della password inserita
        String hashedPassword = PasswordUtil.hashPassword(new String(password));
        
        // Verifica se le credenziali sono corrette
        if (ADMIN_USERNAME.equals(username) && ADMIN_PASSWORD_HASH.equals(hashedPassword)) {
            // Se corrette, cambia il colore dei campi e apre la finestra Admin
            jPasswordField1.setBackground(Color.green);
            jTextField1.setBackground(Color.green);
            isAdmin = true;
            new FinestraAdmin().setVisible(true);
            // Pulisce la variabile password per sicurezza
            Arrays.fill(password, ' ');

        } else if (!ADMIN_PASSWORD_HASH.equals(hashedPassword)) {
            // Se la password è errata, mostra un messaggio di errore
            JOptionPane.showMessageDialog(this, "Password Sbagliata", "ERRORE", JOptionPane.ERROR_MESSAGE);
            jPasswordField1.setBackground(Color.red);
            jPasswordField1.setText("");
        }
        
        // Se l'utente è admin, chiudi la finestra corrente
        if (isAdmin) {
            dispose();
        }
    }                                        

    // Classe per gestire la hash della password
    public class PasswordUtil {

        // Metodo per eseguire l'hash della password con algoritmo SHA-256
        public static String hashPassword(String password) {
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                byte[] hash = digest.digest(password.getBytes());
                StringBuilder hexString = new StringBuilder();
                for (byte b : hash) {
                    String hex = Integer.toHexString(0xff & b);
                    if (hex.length() == 1) {
                        hexString.append('0');
                    }
                    hexString.append(hex);
                }
                return hexString.toString();
            } catch (NoSuchAlgorithmException e) {
                throw new RuntimeException(e);
            }
        }
    }

    // Metodo che gestisce l'azione dell'utente nel campo username
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        //username = "admin";
        username = jTextField1.getText();
        //jTextField1.setEnabled(false);
    }                                           

    // Metodo che gestisce l'azione dell'utente nel campo password
    private void jPasswordField1ActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
        password = jPasswordField1.getPassword();
    }                                               

    // Metodo che gestisce il click del pulsante per l'accesso come utente
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        String nome = null;
        // Chiede il nome dell'utente
        nome = JOptionPane.showInputDialog(this, "Inserisci il tuo nome:", "Utente", JOptionPane.QUESTION_MESSAGE);
        isAdmin = false;
        // Se il nome è valido, apre la finestra per l'utente
        if (nome != null) {
            dispose();
            new KahootFinestra("User: " + nome).setVisible(true);
        } else {
            // Se il nome non è valido, mostra un messaggio di errore
            JOptionPane.showMessageDialog(this, "Inserire nome valido!", "Errore", JOptionPane.ERROR_MESSAGE);
        }

    }                                        

    // Metodo che gestisce il focus sul campo username
    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {                                        
        // TODO add your handling code here:
        if (jTextField1.getText().equals("username")) {
            jTextField1.setText("");
        }
    }                                       

    // Metodo che gestisce il focus sul campo password
    private void jPasswordField1FocusGained(java.awt.event.FocusEvent evt) {                                            
        // TODO add your handling code here:
        if (String.valueOf(jPasswordField1.getPassword()).equals("password")) {
            jPasswordField1.setText("");
        }
    }                                           

    // Metodo che gestisce il focus perso nel campo password
    private void jPasswordField1FocusLost(java.awt.event.FocusEvent evt) {                                          
        // TODO add your handling code here:
        if (String.valueOf(jPasswordField1.getPassword()).isEmpty()) {
            jPasswordField1.setText("password");
        }
    }                                         

    // Metodo che gestisce il focus perso nel campo username
    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {                                      
        // TODO add your handling code here:
        if (jTextField1.getText().isEmpty()) {
            jTextField1.setText("username");
        }
    }                                     

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserRequest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration                   
}
