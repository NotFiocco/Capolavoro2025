/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author s.isaic
 */
import java.awt.Color;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;

public class KahootFinestra extends javax.swing.JFrame {

    private String nome;
    private int Punteggio;
    private List<KahootClass> domandeSbagliate;
    /**
     * Creates new form KahootFinestra
     */
    public KahootFinestra(String nome) {
        this.nome = nome;
        initComponents();
        setTitle(nome); // Imposta il titolo della finestra con il nome dell'utente
        ricaricaDomande(); // Carica le domande dal file
        domandeSbagliate = new ArrayList<>(); // Inizializza la lista delle domande sbagliate
        InputStream is = getClass().getResourceAsStream("domande1.txt"); // Carica il file delle domande
        if (is == null) {
            throw new IllegalArgumentException("File domande1.txt non trovato!"); // Se il file non esiste, lancia un'eccezione
        }
        domande = LettoreDomande.leggiDomandeDaFile(is); // Legge le domande dal file
        setLocationRelativeTo(null); // Centra la finestra sullo schermo
        if (!domande.isEmpty()) {
            mostraDomanda(domandaCorrente); // Mostra la prima domanda
        }
    }

    // Metodo per mostrare la domanda corrente
    private void mostraDomanda(int index) {
        if (index < domande.size()) {
            KahootClass domanda = domande.get(index);
            jLabel1.setText(domanda.getDomande()); // Mostra la domanda
            String[] opzioni = domanda.getOpzioni();
            jButton1.setText(opzioni[0]);
            jButton2.setText(opzioni[1]);
            jButton3.setText(opzioni[2]);
            jButton4.setText(opzioni[3]);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel2.setText("jLabel2");

        jLabel3.setText("jLabel3");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(nome);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("jButton4");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("<Question>");

        jButton5.setText("Avanti");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Fine Kahoot");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 43, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        
                      

    // Metodo per gestire la risposta della prima opzione
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        verificaRisposta(0); // Verifica se la risposta Ã¨ corretta
    }                                        

    // Metodo per gestire la risposta della seconda opzione
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        verificaRisposta(1); // Verifica se la risposta Ã¨ corretta
    }                                        

    // Metodo per gestire la risposta della terza opzione
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        verificaRisposta(2); // Verifica se la risposta Ã¨ corretta
    }                                        

    // Metodo per gestire la risposta della quarta opzione
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        verificaRisposta(3); // Verifica se la risposta Ã¨ corretta
    }                                        

    // Metodo per gestire la pressione del tasto per la domanda successiva
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                         

        if (domandaCorrente < domande.size()) {
            ;//non capisco perchÃ¨ non va senza if
            if (domandaCorrente < domande.size()) {
                // Reset dei colori dei pulsanti e abilitazione delle risposte
                jButton1.setBackground(null);
                jButton2.setBackground(null);
                jButton3.setBackground(null);
                jButton4.setBackground(null);
                jButton2.setEnabled(true);
                jButton3.setEnabled(true);
                jButton1.setEnabled(true);
                jButton4.setEnabled(true);
                mostraDomanda(domandaCorrente); // Mostra la prossima domanda
            } else {
                // Se non ci sono piÃ¹ domande, nasconde il tasto e mostra la finestra di fine gioco
                jButton5.setVisible(false);
                dispose();
                new FineKahoot(Punteggio, domandeSbagliate).setVisible(true);
            }

        }
    }                                        

    // Metodo per gestire la pressione del tasto di fine Kahoot
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        int fine = JOptionPane.showConfirmDialog(this, "Sei Sicuro di voler finire il kahoot?", "Fine Kahoot", JOptionPane.ERROR_MESSAGE);
        if (fine == 0) {
            dispose(); // Chiude la finestra attuale
            new FineKahoot(Punteggio, domandeSbagliate).setVisible(true); // Mostra la finestra di fine gioco
        }
    }                                        

    // Metodo per verificare se la risposta Ã¨ corretta
    private void verificaRisposta(int indiceRisposta) {
        // Reset dei colori dei pulsanti
        jButton1.setBackground(null);
        jButton2.setBackground(null);
        jButton3.setBackground(null);
        jButton4.setBackground(null);
        KahootClass domandaCorrenteObj = domande.get(domandaCorrente);
        int rispostaCorretta = domandaCorrenteObj.getRispostaCorretta();
        // Se la risposta Ã¨ corretta
        if (indiceRisposta == rispostaCorretta) {
            Punteggio++; // Incrementa il punteggio
            switch (rispostaCorretta) {
                case 0:
                    jButton1.setBackground(Color.green);
                    jButton2.setEnabled(false);
                    jButton3.setEnabled(false);
                    jButton4.setEnabled(false);
                    break;
                case 1:
                    jButton2.setBackground(Color.green);
                    jButton1.setEnabled(false);
                    jButton3.setEnabled(false);
                    jButton4.setEnabled(false);
                    break;
                case 2:
                    jButton3.setBackground(Color.green);
                    jButton1.setEnabled(false);
                    jButton2.setEnabled(false);
                    jButton4.setEnabled(false);
                    break;
                case 3:
                    jButton4.setBackground(Color.green);
                    jButton2.setEnabled(false);
                    jButton3.setEnabled(false);
                    jButton1.setEnabled(false);
                    break;
            }
        } else {
            // Se la risposta Ã¨ sbagliata, aggiungi la domanda alla lista delle sbagliate
            domandeSbagliate.add(domandaCorrenteObj);
            switch (indiceRisposta) {
                case 0:
                    jButton1.setBackground(Color.RED);
                    jButton2.setEnabled(false);
                    jButton3.setEnabled(false);
                    jButton4.setEnabled(false);
                    break;
                case 1:
                    jButton2.setBackground(Color.RED);
                    jButton1.setEnabled(false);
                    jButton3.setEnabled(false);
                    jButton4.setEnabled(false);
                    break;
                case 2:
                    jButton3.setBackground(Color.RED);
                    jButton1.setEnabled(false);
                    jButton2.setEnabled(false);
                    jButton4.setEnabled(false);
                    break;
                case 3:
                    jButton4.setBackground(Color.RED);
                    jButton2.setEnabled(false);
                    jButton3.setEnabled(false);
                    jButton1.setEnabled(false);
                    break;
            }
        }
        
        domandaCorrente++; // Passa alla domanda successiva
        if (domandaCorrente == domande.size()) {
            jButton5.setVisible(false); // Nasconde il tasto "Prossima domanda" se non ci sono piÃ¹ domande
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KahootFinestra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KahootFinestra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KahootFinestra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KahootFinestra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserRequest().setVisible(true); // Mostra la finestra di login
            }
        });
    }

    // Metodo per ricaricare le domande
    public void ricaricaDomande() {
        InputStream is = getClass().getResourceAsStream("domande1.txt");
        if (is == null) {
            throw new IllegalArgumentException("File domande1.txt non trovato!"); // Se il file non esiste, lancia un'eccezione
        }
        domande = LettoreDomande.leggiDomandeDaFile(is); // Carica le domande
        domandaCorrente = 0; // Resetta l'indice della domanda corrente
        if (!domande.isEmpty()) {
            mostraDomanda(domandaCorrente); // Mostra la prima domanda
        }
    }

    // Classe per leggere le domande dal file
    class LettoreDomande {

        // Metodo per leggere le domande dal file
        public static List<KahootClass> leggiDomandeDaFile(InputStream inputStream) {
            List<KahootClass> domande = new ArrayList<>();

            try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) {
                String linea;
                while ((linea = br.readLine()) != null) {
                    String domanda = linea;
                    String[] opzioni = new String[4];

                    for (int i = 0; i < 4; i++) {
                        opzioni[i] = br.readLine(); // Legge le opzioni
                    }

                    int rispostaCorretta = Integer.parseInt(br.readLine()); // Legge la risposta corretta

                    domande.add(new KahootClass(domanda, new int[]{rispostaCorretta}, opzioni)); // Aggiunge la domanda alla lista
                }
            } catch (IOException e) {
                System.out.println("Errore nella lettura del file: " + e.getMessage());
            }
            return domande; // Restituisce la lista delle domande
        }

    }


    // Variabili dichiarate per i componenti della finestra
    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration                   
    private List<KahootClass> domande;
    private int domandaCorrente = 0;
}
